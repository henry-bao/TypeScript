=== tests/cases/compiler/tsxDiscriminantPropertyInference.tsx ===
// Repro from #41759
namespace JSX {
    export interface Element {}
}

type DiscriminatorTrue = {
>DiscriminatorTrue : DiscriminatorTrue

    disc: true;
>disc : true
>true : true

    cb: (x: string) => void;
>cb : (x: string) => void
>x : string
}

type DiscriminatorFalse = {
>DiscriminatorFalse : DiscriminatorFalse

    disc?: false;
>disc : false | undefined
>false : false

    cb: (x: number) => void;
>cb : (x: number) => void
>x : number
}

type Unrelated = {
>Unrelated : Unrelated

    val: number;
>val : number
}

type Props = DiscriminatorTrue | DiscriminatorFalse;
>Props : Props

type UnrelatedProps = Props | Unrelated;
>UnrelatedProps : UnrelatedProps

declare function Comp(props: Props): JSX.Element;
>Comp : (props: Props) => JSX.Element
>props : Props
>JSX : any

// simple inference
void (<Comp disc cb={s => parseInt(s)} />);
>void (<Comp disc cb={s => parseInt(s)} />) : undefined
>(<Comp disc cb={s => parseInt(s)} />) : JSX.Element
><Comp disc cb={s => parseInt(s)} /> : JSX.Element
>Comp : (props: Props) => JSX.Element
>disc : true
>cb : (s: string) => number
>s => parseInt(s) : (s: string) => number
>s : string
>parseInt(s) : number
>parseInt : (string: string, radix?: number | undefined) => number
>s : string

// simple inference
void (<Comp disc={false} cb={n => n.toFixed()} />);
>void (<Comp disc={false} cb={n => n.toFixed()} />) : undefined
>(<Comp disc={false} cb={n => n.toFixed()} />) : JSX.Element
><Comp disc={false} cb={n => n.toFixed()} /> : JSX.Element
>Comp : (props: Props) => JSX.Element
>disc : false
>false : false
>cb : (n: number) => string
>n => n.toFixed() : (n: number) => string
>n : number
>n.toFixed() : string
>n.toFixed : (fractionDigits?: number | undefined) => string
>n : number
>toFixed : (fractionDigits?: number | undefined) => string

// simple inference when strict-null-checks are enabled
void (<Comp disc={undefined} cb={n => n.toFixed()} />);
>void (<Comp disc={undefined} cb={n => n.toFixed()} />) : undefined
>(<Comp disc={undefined} cb={n => n.toFixed()} />) : JSX.Element
><Comp disc={undefined} cb={n => n.toFixed()} /> : JSX.Element
>Comp : (props: Props) => JSX.Element
>disc : undefined
>undefined : undefined
>cb : (n: number) => string
>n => n.toFixed() : (n: number) => string
>n : number
>n.toFixed() : string
>n.toFixed : (fractionDigits?: number | undefined) => string
>n : number
>toFixed : (fractionDigits?: number | undefined) => string

// requires checking type information since discriminator is missing from object
void (<Comp cb={n => n.toFixed()} />);
>void (<Comp cb={n => n.toFixed()} />) : undefined
>(<Comp cb={n => n.toFixed()} />) : JSX.Element
><Comp cb={n => n.toFixed()} /> : JSX.Element
>Comp : (props: Props) => JSX.Element
>cb : (n: number) => string
>n => n.toFixed() : (n: number) => string
>n : number
>n.toFixed() : string
>n.toFixed : (fractionDigits?: number | undefined) => string
>n : number
>toFixed : (fractionDigits?: number | undefined) => string

declare function UnrelatedComp(props: UnrelatedProps): JSX.Element;
>UnrelatedComp : (props: UnrelatedProps) => JSX.Element
>props : UnrelatedProps
>JSX : any

// requires checking properties of all types, rather than properties of just the union type (e.g. only intersection)
void (<Comp cb={n => n.toFixed()} />);
>void (<Comp cb={n => n.toFixed()} />) : undefined
>(<Comp cb={n => n.toFixed()} />) : JSX.Element
><Comp cb={n => n.toFixed()} /> : JSX.Element
>Comp : (props: Props) => JSX.Element
>cb : (n: number) => string
>n => n.toFixed() : (n: number) => string
>n : number
>n.toFixed() : string
>n.toFixed : (fractionDigits?: number | undefined) => string
>n : number
>toFixed : (fractionDigits?: number | undefined) => string

